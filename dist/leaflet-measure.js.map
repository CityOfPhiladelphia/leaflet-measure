{"version":3,"file":"leaflet-measure.js","sources":["../src/util/units.js","../src/util/dom.js","../src/util/measure.js","../src/symbology.js","../src/index.js"],"sourcesContent":["// units.js\r\n// Unit configurations\r\n// Factor is with respect to meters/sqmeters\r\n\r\nexport default {\r\n  acres: {\r\n    factor: 0.00024711,\r\n    display: 'acres',\r\n    decimals: 2\r\n  },\r\n  feet: {\r\n    factor: 3.2808,\r\n    display: 'feet',\r\n    decimals: 0\r\n  },\r\n  kilometers: {\r\n    factor: 0.001,\r\n    display: 'kilometers',\r\n    decimals: 2\r\n  },\r\n  hectares: {\r\n    factor: 0.0001,\r\n    display: 'hectares',\r\n    decimals: 2\r\n  },\r\n  meters: {\r\n    factor: 1,\r\n    display: 'meters',\r\n    decimals: 0\r\n  },\r\n  miles: {\r\n    factor: 3.2808 / 5280,\r\n    display: 'miles',\r\n    decimals: 2\r\n  },\r\n  sqfeet: {\r\n    factor: 10.7639,\r\n    display: 'sqfeet',\r\n    decimals: 0\r\n  },\r\n  sqmeters: {\r\n    factor: 1,\r\n    display: 'sqmeters',\r\n    decimals: 0\r\n  },\r\n  sqmiles: {\r\n    factor: 0.000000386102,\r\n    display: 'sqmiles',\r\n    decimals: 2\r\n  }\r\n};\r\n","// dom.js\r\n// utility functions for managing DOM elements\r\n\r\nexport function selectOne(selector, el) {\r\n  if (!el) {\r\n    el = document;\r\n  }\r\n  return el.querySelector(selector);\r\n}\r\n\r\nexport function selectAll(selector, el) {\r\n  if (!el) {\r\n    el = document;\r\n  }\r\n  return Array.prototype.slice.call(el.querySelectorAll(selector));\r\n}\r\n\r\nexport function hide(el) {\r\n  if (el) {\r\n    el.setAttribute('style', 'display:none;');\r\n    return el;\r\n  }\r\n}\r\n\r\nexport function show(el) {\r\n  if (el) {\r\n    el.removeAttribute('style');\r\n    return el;\r\n  }\r\n}\r\n","import { Polyline, Polygon } from 'leaflet';\r\nimport length from '@turf/length';\r\nimport area from '@turf/area';\r\n\r\n/* calc measurements for an array of points */\r\nexport default function measure(latlngs) {\r\n  const last = latlngs[latlngs.length - 1];\r\n  const path = latlngs.map(latlng => [latlng.lat, latlng.lng]);\r\n  const polyline = new Polyline(path);\r\n  const polygon = new Polygon(path);\r\n  const meters = length(polyline.toGeoJSON(), { units: 'kilometers' }) * 1000;\r\n  const sqMeters = area(polygon.toGeoJSON());\r\n\r\n  return {\r\n    length: meters,\r\n    area: sqMeters,\r\n  };\r\n};\r\n","const DEFAULT_OPTIONS = {\r\n  activeColor: '#ABE67E',\r\n  completedColor: '#C8F2BE'\r\n};\r\n\r\nexport default class Symbology {\r\n  constructor(options) {\r\n    this._options = L.extend({}, DEFAULT_OPTIONS, this._options, options);\r\n  }\r\n\r\n  getSymbol(name) {\r\n    const symbols = {\r\n      measureDrag: {\r\n        clickable: false,\r\n        radius: 4,\r\n        color: this._options.activeColor,\r\n        weight: 2,\r\n        opacity: 0.7,\r\n        fillColor: this._options.activeColor,\r\n        fillOpacity: 0.5,\r\n        className: 'layer-measuredrag'\r\n      },\r\n      measureArea: {\r\n        clickable: false,\r\n        stroke: false,\r\n        fillColor: this._options.activeColor,\r\n        fillOpacity: 0.2,\r\n        className: 'layer-measurearea'\r\n      },\r\n      measureBoundary: {\r\n        clickable: false,\r\n        color: this._options.activeColor,\r\n        weight: 2,\r\n        opacity: 0.9,\r\n        fill: false,\r\n        className: 'layer-measureboundary'\r\n      },\r\n      measureVertex: {\r\n        clickable: false,\r\n        radius: 4,\r\n        color: this._options.activeColor,\r\n        weight: 2,\r\n        opacity: 1,\r\n        fillColor: this._options.activeColor,\r\n        fillOpacity: 0.7,\r\n        className: 'layer-measurevertex'\r\n      },\r\n      measureVertexActive: {\r\n        clickable: false,\r\n        radius: 4,\r\n        color: this._options.activeColor,\r\n        weight: 2,\r\n        opacity: 1,\r\n        fillColor: this._options.activeColor,\r\n        fillOpacity: 1,\r\n        className: 'layer-measurevertex active'\r\n      },\r\n      resultArea: {\r\n        clickable: true,\r\n        color: this._options.completedColor,\r\n        weight: 2,\r\n        opacity: 0.9,\r\n        fillColor: this._options.completedColor,\r\n        fillOpacity: 0.2,\r\n        className: 'layer-measure-resultarea'\r\n      },\r\n      resultLine: {\r\n        clickable: true,\r\n        color: this._options.completedColor,\r\n        weight: 3,\r\n        opacity: 0.9,\r\n        fill: false,\r\n        className: 'layer-measure-resultline'\r\n      },\r\n      resultPoint: {\r\n        clickable: true,\r\n        radius: 4,\r\n        color: this._options.completedColor,\r\n        weight: 2,\r\n        opacity: 1,\r\n        fillColor: this._options.completedColor,\r\n        fillOpacity: 0.7,\r\n        className: 'layer-measure-resultpoint'\r\n      }\r\n    };\r\n    return symbols[name];\r\n  }\r\n}\r\n","import * as L from 'leaflet';\r\nimport template from 'lodash/template';\r\nimport units from './util/units';\r\nimport * as dom from './util/dom';\r\nimport measure from './util/measure';\r\nimport Symbology from './symbology';\r\n\r\n// templates\r\nimport controlTemplate from './templates/control-template.html';\r\nimport resultsTemplate from './templates/results-template.html';\r\nimport pointPopupTemplate from './templates/point-popup-template.html';\r\nimport linePopupTemplate from './templates/line-popup-template.html';\r\nimport areaPopupTemplate from './templates/area-popup-template.html';\r\n\r\n// alias element selector\r\nconst $ = dom.selectOne;\r\n\r\nfunction numberFormat(num) {\r\n  return num.toLocaleString();\r\n}\r\n\r\nconst templateSettings = {\r\n  imports: { numberFormat },\r\n  interpolate: /{{([\\s\\S]+?)}}/g, // mustache\r\n};\r\nconst controlTemplateCompiled = template(controlTemplate, templateSettings);\r\nconst resultsTemplateCompiled = template(resultsTemplate, templateSettings);\r\nconst pointPopupTemplateCompiled = template(pointPopupTemplate, templateSettings);\r\nconst linePopupTemplateCompiled = template(linePopupTemplate, templateSettings);\r\nconst areaPopupTemplateCompiled = template(areaPopupTemplate, templateSettings);\r\n\r\nconst MeasureControl = L.Control.extend({\r\n  _className: 'leaflet-control-measure',\r\n  options: {\r\n    units: {},\r\n    position: 'topright',\r\n    primaryLengthUnit: 'feet',\r\n    // secondaryLengthUnit: 'miles',\r\n    primaryAreaUnit: 'sqfeet',\r\n    activeColor: '#ABE67E', // base color for map features while actively measuring\r\n    completedColor: '#74acbd', //'#C8F2BE',  // base color for permenant features generated from completed measure\r\n    captureZIndex: 10000, // z-index of the marker used to capture measure events\r\n    popupOptions: {\r\n      // standard leaflet popup options http://leafletjs.com/reference.html#popup-options\r\n      className: 'leaflet-measure-resultpopup',\r\n      autoPanPadding: [10, 10]\r\n    }\r\n  },\r\n\r\n  initialize: function (options) {\r\n    L.setOptions(this, options);\r\n    const { activeColor, completedColor } = this.options;\r\n    this._symbols = new Symbology({ activeColor, completedColor });\r\n    this.options.units = Object.assign({}, units, this.options.units);\r\n  },\r\n\r\n  onAdd: function (map) {\r\n    this._map = map;\r\n\r\n    // arrays used to hold simple values\r\n    this._latlngs = [];\r\n    this._lengths = [];\r\n\r\n    // arrays used to hold leaflet objects\r\n    // _lengthNotations holds leaflet markers that are made with leaflet divIcons\r\n    this._lengthNotations = [];\r\n    // _vertexCircleMarkers holds circleMarkers\r\n    this._vertexCircleMarkers = [];\r\n    // _measureFeatures holds the \"measureFeature\" layerGroups (which hold both circle markers and icon markers)\r\n    this._measureFeatures = [];\r\n\r\n    this._initLayout();\r\n\r\n    map.on('click', this._collapse, this);\r\n\r\n    this._layer = L.layerGroup().addTo(map);\r\n\r\n    return this._container;\r\n  },\r\n\r\n  onRemove: function (map) {\r\n    map.off('click', this._collapse, this);\r\n\r\n    map.removeLayer(this._layer);\r\n  },\r\n\r\n  _initLayout: function () {\r\n    const className = this._className,\r\n      container = (this._container = L.DomUtil.create('div', `${className} leaflet-bar`));\r\n    // var $toggle, $start, $cancel, $undo, $finish;\r\n\r\n    container.innerHTML = controlTemplateCompiled({\r\n      model: {\r\n        className: className\r\n      }\r\n    });\r\n\r\n    // makes this work on IE touch devices by stopping it from firing a mouseout event when the touch is released\r\n    container.setAttribute('aria-haspopup', true);\r\n    L.DomEvent.disableClickPropagation(container);\r\n    L.DomEvent.disableScrollPropagation(container);\r\n\r\n    const $toggle = (this.$toggle = $('.js-toggle', container)); // collapsed content\r\n    this.$interaction = $('.js-interaction', container); // expanded content\r\n    const $start = $('.js-start', container); // start button\r\n    const $cancel = $('.js-cancel', container); // cancel button\r\n    const $undo = $('.js-undo', container);\r\n    const $finish = $('.js-finish', container); // finish button\r\n    this.$startPrompt = $('.js-startprompt', container); // full area with button to start measurment\r\n    this.$measuringPrompt = $('.js-measuringprompt', container); // full area with all stuff for active measurement\r\n    this.$startHelp = $('.js-starthelp', container); // \"Start creating a measurement by adding points\"\r\n    this.$results = $('.js-results', container); // div with coordinate, linear, area results\r\n    this.$measureTasks = $('.js-measuretasks', container); // active measure buttons container\r\n\r\n    this._collapse();\r\n    this._updateMeasureNotStarted();\r\n\r\n    if (!L.Browser.android) {\r\n      L.DomEvent.on(container, 'mouseenter', this._expand, this);\r\n      L.DomEvent.on(container, 'mouseleave', this._collapse, this);\r\n    }\r\n    L.DomEvent.on($toggle, 'click', L.DomEvent.stop);\r\n    if (L.Browser.touch) {\r\n      L.DomEvent.on($toggle, 'click', this._expand, this);\r\n    } else {\r\n      L.DomEvent.on($toggle, 'focus', this._expand, this);\r\n    }\r\n    L.DomEvent.on($start, 'click', L.DomEvent.stop);\r\n    L.DomEvent.on($start, 'click', this._startMeasure, this);\r\n    L.DomEvent.on($cancel, 'click', L.DomEvent.stop);\r\n    L.DomEvent.on($cancel, 'click', this._finishMeasure, this);\r\n    L.DomEvent.on($undo, 'click', L.DomEvent.stop);\r\n    L.DomEvent.on($undo, 'click', this._undoMeasure, this);\r\n    L.DomEvent.on($finish, 'click', L.DomEvent.stop);\r\n    L.DomEvent.on($finish, 'click', this._handleMeasureDoubleClick, this);\r\n  },\r\n\r\n  _expand: function () {\r\n    dom.hide(this.$toggle);\r\n    dom.show(this.$interaction);\r\n  },\r\n\r\n  _collapse: function () {\r\n    if (!this._locked) {\r\n      dom.hide(this.$interaction);\r\n      dom.show(this.$toggle);\r\n    }\r\n  },\r\n\r\n  // move between basic states:\r\n  // measure not started, started/in progress but no points added, in progress and with points\r\n  _updateMeasureNotStarted: function () {\r\n    dom.hide(this.$startHelp);\r\n    dom.hide(this.$results);\r\n    dom.hide(this.$measureTasks);\r\n    dom.hide(this.$measuringPrompt);\r\n    dom.show(this.$startPrompt);\r\n  },\r\n\r\n  _updateMeasureStartedNoPoints: function () {\r\n    dom.hide(this.$results);\r\n    dom.show(this.$startHelp);\r\n    dom.show(this.$measureTasks);\r\n    dom.hide(this.$startPrompt);\r\n    dom.show(this.$measuringPrompt);\r\n  },\r\n\r\n  _updateMeasureStartedWithPoints: function () {\r\n    dom.hide(this.$startHelp);\r\n    dom.show(this.$results);\r\n    dom.show(this.$measureTasks);\r\n    dom.hide(this.$startPrompt);\r\n    dom.show(this.$measuringPrompt);\r\n  },\r\n\r\n  // get state vars and interface ready for measure\r\n  _startMeasure: function () {\r\n    this._locked = true;\r\n    // new leaflet feature groups are created on _startMeasure\r\n    this._measureLengths = L.featureGroup().addTo(this._layer);\r\n    this._measureVertexes = L.featureGroup().addTo(this._layer);\r\n    this._captureMarker = L.marker(this._map.getCenter(), {\r\n      clickable: true,\r\n      zIndexOffset: this.options.captureZIndex,\r\n      opacity: 0\r\n    }).addTo(this._layer);\r\n    this._setCaptureMarkerIcon();\r\n\r\n    this._captureMarker\r\n      .on('mouseout', this._handleMapMouseOut, this)\r\n      .on('dblclick', this._handleMeasureDoubleClick, this)\r\n      .on('click', this._handleMeasureClick, this);\r\n\r\n    this._map\r\n      .on('mousemove', this._handleMeasureMove, this)\r\n      .on('mouseout', this._handleMapMouseOut, this)\r\n      .on('move', this._centerCaptureMarker, this)\r\n      .on('resize', this._setCaptureMarkerIcon, this);\r\n\r\n    L.DomEvent.on(this._container, 'mouseenter', this._handleMapMouseOut, this);\r\n\r\n    this._updateMeasureStartedNoPoints();\r\n\r\n    this._map.fire('measurestart', null, false);\r\n  },\r\n\r\n  // remove the last clicked point and notation\r\n  _undoMeasure: function () {\r\n    // remove last simple coordinate from _latlngs\r\n    this._latlngs = this._latlngs.slice(0, -1);\r\n    // remove the last length notation\r\n    this._removeLastLengthNotation();\r\n    // remove the last point\r\n    this._removeLastVertex();\r\n    if (this._latlngs.length > 0) {\r\n      this._addMeasureArea(this._latlngs);\r\n      this._addMeasureBoundary(this._latlngs);\r\n      this._updateResults();\r\n    }\r\n    // if you undo when there are no points put down, it changes the widget back to the original info\r\n    if (this._latlngs.length === 0) {\r\n      this._updateMeasureStartedNoPoints();\r\n    }\r\n  },\r\n\r\n  // return to state with no measure in progress, undo `this._startMeasure`\r\n  _finishMeasure: function (isComplete) {\r\n    let shouldDeleteLengths;\r\n    if (isComplete === true) {\r\n      shouldDeleteLengths = false;\r\n    } else {\r\n      shouldDeleteLengths = true;\r\n    }\r\n    // var model = _.extend({}, this._resultsModel, {\r\n    const model = Object.assign({}, this._resultsModel, {\r\n      points: this._latlngs\r\n    });\r\n\r\n    this._locked = false;\r\n\r\n    L.DomEvent.off(this._container, 'mouseover', this._handleMapMouseOut, this);\r\n\r\n    this._clearMeasure(shouldDeleteLengths);\r\n\r\n    this._captureMarker\r\n      .off('mouseout', this._handleMapMouseOut, this)\r\n      .off('dblclick', this._handleMeasureDoubleClick, this)\r\n      .off('click', this._handleMeasureClick, this);\r\n\r\n    this._map\r\n      .off('mousemove', this._handleMeasureMove, this)\r\n      .off('mouseout', this._handleMapMouseOut, this)\r\n      .off('move', this._centerCaptureMarker, this)\r\n      .off('resize', this._setCaptureMarkerIcon, this);\r\n\r\n    this._layer.removeLayer(this._measureVertexes).removeLayer(this._captureMarker);\r\n    this._measureVertexes = null;\r\n\r\n    this._updateMeasureNotStarted();\r\n    this._collapse();\r\n\r\n    this._map.fire('measurefinish', model, false);\r\n  },\r\n\r\n  // clear all running measure data\r\n  _clearMeasure: function (shouldDeleteLengths) {\r\n    this._latlngs = [];\r\n    this._resultsModel = null;\r\n    if (shouldDeleteLengths) {\r\n      this._measureLengths.clearLayers();\r\n    }\r\n    this._measureVertexes.clearLayers();\r\n    if (this._measureDrag) {\r\n      this._layer.removeLayer(this._measureDrag);\r\n    }\r\n    if (this._measureArea) {\r\n      this._layer.removeLayer(this._measureArea);\r\n    }\r\n    if (this._measureBoundary) {\r\n      this._layer.removeLayer(this._measureBoundary);\r\n    }\r\n    this._measureDrag = null;\r\n    this._measureArea = null;\r\n    this._measureBoundary = null;\r\n  },\r\n\r\n  // centers the event capture marker\r\n  _centerCaptureMarker: function () {\r\n    this._captureMarker.setLatLng(this._map.getCenter());\r\n  },\r\n\r\n  // set icon on the capture marker\r\n  _setCaptureMarkerIcon: function () {\r\n    this._captureMarker.setIcon(\r\n      L.divIcon({\r\n        iconSize: this._map.getSize().multiplyBy(2)\r\n      })\r\n    );\r\n  },\r\n\r\n  // format measurements to nice display string based on units in options\r\n  // `{ lengthDisplay: '100 Feet (0.02 Miles)', areaDisplay: ... }`\r\n  _getMeasurementDisplayStrings: function (measurement) {\r\n    // console.log(\r\n    //   '_getMeasurementDisplayStrings units:',\r\n    //   this.options.units,\r\n    //   'primaryLengthUnit:',\r\n    //   this.options.primaryLengthUnit,\r\n    //   'primaryAreaUnit:',\r\n    //   this.options.primaryAreaUnit\r\n    // );\r\n    const unitDefinitions = this.options.units;\r\n\r\n    return {\r\n      lengthDisplay: buildDisplay(\r\n        measurement.length,\r\n        this.options.primaryLengthUnit,\r\n        this.options.secondaryLengthUnit,\r\n        this.options.decPoint,\r\n        this.options.thousandsSep\r\n      ),\r\n      areaDisplay: buildDisplay(\r\n        measurement.area,\r\n        this.options.primaryAreaUnit,\r\n        this.options.secondaryAreaUnit,\r\n        this.options.decPoint,\r\n        this.options.thousandsSep\r\n      )\r\n    };\r\n\r\n    function buildDisplay(val, primaryUnit, secondaryUnit, decPoint, thousandsSep) {\r\n      let display;\r\n      if (primaryUnit && unitDefinitions[primaryUnit]) {\r\n        display = formatMeasure(val, unitDefinitions[primaryUnit], decPoint, thousandsSep);\r\n        if (secondaryUnit && unitDefinitions[secondaryUnit]) {\r\n          const formatted = formatMeasure(\r\n            val,\r\n            unitDefinitions[secondaryUnit],\r\n            decPoint,\r\n            thousandsSep\r\n          );\r\n          display = `${display} (${formatted})`;\r\n        } else {\r\n          display = formatMeasure(val, null, decPoint, thousandsSep);\r\n        }\r\n        return display;\r\n      }\r\n      return formatMeasure(val, null, decPoint, thousandsSep);\r\n    }\r\n\r\n    function formatMeasure(val, unit, decPoint, thousandsSep) {\r\n      const unitDisplays = {\r\n        acres: 'Acres',\r\n        feet: 'Feet',\r\n        kilometers: 'Kilometers',\r\n        hectares: 'Hectares',\r\n        meters: 'Meters',\r\n        miles: 'Miles',\r\n        sqfeet: 'Sq Feet',\r\n        sqmeters: 'Sq Meters',\r\n        sqmiles: 'Sq Miles',\r\n      };\r\n\r\n      // const u = Object.assign({ factor: 1, decimals: 0 }, unit);\r\n      // const formattedNumber = numberFormat(\r\n      //   val * u.factor,\r\n      //   u.decimals,\r\n      //   '.',\r\n      //   ','\r\n      // );\r\n\r\n      const { display } = unit;\r\n      const label = unitDisplays[display] || display;\r\n\r\n      return [formattedNumber, label].join(' ');\r\n    }\r\n  },\r\n\r\n  // format measurements to nice SHORTER display string based on units in options\r\n  // `{ lengthDisplay: '100 ft', areaDisplay: ... }`\r\n  _getShorterMeasurementDisplayStrings: function (measurement) {\r\n    // console.log(\r\n    //   '_getShorterMeasurementDisplayStrings measurement.length:',\r\n    //   measurement.length,\r\n    //   'this.options.primaryLengthUnit:',\r\n    //   this.options.primaryLengthUnit,\r\n    //   'secondaryLengthUnit:',\r\n    //   this.options.secondaryLengthUnit\r\n    // );\r\n    const unitDefinitions = this.options.units;\r\n    return {\r\n      lengthDisplay: buildDisplay(\r\n        measurement.length,\r\n        this.options.primaryLengthUnit,\r\n        this.options.secondaryLengthUnit,\r\n        '.',\r\n        this.options.thousandsSep\r\n      ),\r\n      areaDisplay: buildDisplay(\r\n        measurement.area,\r\n        this.options.primaryAreaUnit,\r\n        this.options.secondaryAreaUnit,\r\n        this.options.decPoint,\r\n        this.options.thousandsSep\r\n      )\r\n    };\r\n\r\n    function buildDisplay(val, primaryUnit, secondaryUnit, decPoint, thousandsSep) {\r\n      let display;\r\n      if (primaryUnit) {\r\n        display = formatMeasure(val, unitDefinitions[primaryUnit], decPoint, thousandsSep);\r\n        if (secondaryUnit && unitDefinitions[secondaryUnit]) {\r\n          display =\r\n            display +\r\n            ' (' +\r\n            formatMeasure(val, unitDefinitions[secondaryUnit], decPoint, thousandsSep) +\r\n            ')';\r\n        }\r\n      } else {\r\n        display = formatMeasure(val, null, decPoint, thousandsSep);\r\n      }\r\n      return display;\r\n    }\r\n\r\n    function formatMeasure(val, unit, decPoint, thousandsSep) {\r\n      const u = Object.assign({ factor: 1, decimals: 2 }, unit);\r\n      const formattedNumber = numberFormat(\r\n        val * u.factor,\r\n        u.decimals,\r\n        '.',\r\n        ','\r\n      );\r\n      return formattedNumber;\r\n    }\r\n  },\r\n\r\n  // update results area of dom with calced measure from `this._latlngs`\r\n  _updateResults: function () {\r\n    const calced = measure(this._latlngs);\r\n    const model = (this._resultsModel = Object.assign(\r\n      {},\r\n      calced,\r\n      this._getShorterMeasurementDisplayStrings(calced),\r\n      {\r\n        pointCount: this._latlngs.length,\r\n        points: this._latlngs,\r\n        lengths: this._lengths\r\n      }\r\n    ));\r\n    // console.log('_updateResults is running, calced:', calced, 'model:', model);\r\n    this.$results.innerHTML = resultsTemplateCompiled({ model });\r\n  },\r\n\r\n  // mouse move handler while measure in progress\r\n  // adds floating measure marker under cursor\r\n  _handleMeasureMove: function (evt) {\r\n    if (!this._measureDrag) {\r\n      this._measureDrag = L.circleMarker(evt.latlng, this._symbols.getSymbol('measureDrag')).addTo(\r\n        this._layer\r\n      );\r\n    } else {\r\n      this._measureDrag.setLatLng(evt.latlng);\r\n    }\r\n    this._measureDrag.bringToFront();\r\n  },\r\n\r\n  // handler for both double click and clicking finish button\r\n  // do final calc and finish out current measure, clear dom and internal state, add permanent map features\r\n  _handleMeasureDoubleClick: function () {\r\n    const latlngs = this._latlngs;\r\n\r\n    const measureFeature = L.layerGroup();\r\n    measureFeature.addTo(this._layer);\r\n    this._measureFeatures.push(measureFeature);\r\n    this._measureLengths.removeFrom(this._layer);\r\n    this._measureLengths.addTo(measureFeature);\r\n    this._finishMeasure(true);\r\n\r\n    const lengths = [];\r\n    for (let i = 0; i < this._lengths.length; i++) {\r\n      lengths[i] = this._lengths[i];\r\n    }\r\n\r\n    if (!latlngs.length) {\r\n      return;\r\n    }\r\n\r\n    if (latlngs.length > 2) {\r\n      latlngs.push((latlngs || [])[0]);\r\n      const count = latlngs.length;\r\n      const previousLatLng = latlngs[count - 2];\r\n      const lastLatLng = latlngs[count - 1];\r\n      const bounds = L.latLngBounds(previousLatLng, lastLatLng);\r\n      const center = bounds.getCenter();\r\n      const pair = [previousLatLng, lastLatLng];\r\n      const calced2 = measure(pair);\r\n      const newNotation = this._addNewLengthNotation(center, calced2);\r\n      newNotation.addTo(this._measureLengths);\r\n      const j = this._lengths.length;\r\n      lengths[j - 1] = this._lengths[j - 1];\r\n    }\r\n\r\n    const calced = measure(latlngs);\r\n    let resultFeature;\r\n    let popupContent;\r\n    let popupContainer;\r\n    let zoomLink;\r\n    let deleteLink;\r\n\r\n    if (latlngs.length === 1) {\r\n      resultFeature = L.circleMarker(latlngs[0], this._symbols.getSymbol('resultPoint'));\r\n      popupContent = pointPopupTemplateCompiled({\r\n        model: calced\r\n      });\r\n    } else if (latlngs.length === 2) {\r\n      resultFeature = L.polyline(latlngs, this._symbols.getSymbol('resultLine'));\r\n      popupContent = linePopupTemplateCompiled({\r\n        model: Object.assign({}, calced, this._getShorterMeasurementDisplayStrings(calced))\r\n      });\r\n    } else {\r\n      resultFeature = L.polygon(latlngs, this._symbols.getSymbol('resultArea'));\r\n      const resultsModel = Object.assign(\r\n        {},\r\n        calced,\r\n        this._getShorterMeasurementDisplayStrings(calced),\r\n        {\r\n          pointCount: latlngs.length,\r\n          points: latlngs,\r\n          lengths: this._lengths\r\n        }\r\n      );\r\n      popupContent = areaPopupTemplateCompiled({\r\n        model: resultsModel,\r\n      });\r\n    }\r\n\r\n    // clear out arrays holding values\r\n    this._lengths = [];\r\n    this._vertexCircleMarkers = [];\r\n\r\n    popupContainer = L.DomUtil.create('div', '');\r\n    popupContainer.innerHTML = popupContent;\r\n\r\n    zoomLink = $('.js-zoomto', popupContainer);\r\n    if (zoomLink) {\r\n      L.DomEvent.on(zoomLink, 'click', L.DomEvent.stop);\r\n      L.DomEvent.on(\r\n        zoomLink,\r\n        'click',\r\n        function () {\r\n          if (resultFeature.getBounds) {\r\n            this._map.fitBounds(resultFeature.getBounds(), {\r\n              padding: [20, 20],\r\n              maxZoom: 17\r\n            });\r\n          } else if (resultFeature.getLatLng) {\r\n            this._map.panTo(resultFeature.getLatLng());\r\n          }\r\n        },\r\n        this\r\n      );\r\n    }\r\n\r\n    deleteLink = $('.js-deletemarkup', popupContainer);\r\n    if (deleteLink) {\r\n      L.DomEvent.on(deleteLink, 'click', L.DomEvent.stop);\r\n      L.DomEvent.on(\r\n        deleteLink,\r\n        'click',\r\n        function () {\r\n          const i = this._measureFeatures.indexOf(measureFeature);\r\n          const selectedMeasureFeature = this._measureFeatures[i];\r\n          selectedMeasureFeature.removeFrom(this._layer);\r\n        },\r\n        this\r\n      );\r\n    }\r\n\r\n    resultFeature.addTo(measureFeature);\r\n    resultFeature.bindPopup(popupContainer, this.options.popupOptions);\r\n    if (resultFeature.getBounds) {\r\n      resultFeature.openPopup(resultFeature.getBounds().getCenter());\r\n    } else if (resultFeature.getLatLng) {\r\n      resultFeature.openPopup(resultFeature.getLatLng());\r\n    }\r\n  },\r\n  // handle map click during ongoing measurement\r\n  // add new clicked point, update measure layers and results ui\r\n  _handleMeasureClick: function (evt) {\r\n    let latlng = this._map.mouseEventToLatLng(evt.originalEvent), // get actual latlng instead of the marker's latlng from originalEvent\r\n      lastClick = (this._latlngs || []).slice(-1)[0],\r\n      firstClick = (this._latlngs || [])[0],\r\n      vertexSymbol = this._symbols.getSymbol('measureVertex');\r\n\r\n    if (!lastClick || !latlng.equals(lastClick)) {\r\n      // skip if same point as last click, happens on `dblclick`\r\n      this._latlngs.push(latlng);\r\n      this._addMeasureArea(this._latlngs);\r\n      this._addMeasureBoundary(this._latlngs);\r\n\r\n      this._measureVertexes.eachLayer(function (layer) {\r\n        layer.setStyle(vertexSymbol);\r\n        // reset all vertexes to non-active class - only last vertex is active\r\n        // `layer.setStyle({ className: 'layer-measurevertex'})` doesn't work. https://github.com/leaflet/leaflet/issues/2662\r\n        // set attribute on path directly\r\n        if (layer._path) {\r\n          layer._path.setAttribute('class', vertexSymbol.className);\r\n        }\r\n      });\r\n\r\n      this._addNewVertex(latlng);\r\n      // if there is a first click\r\n      if (firstClick) {\r\n        // console.log('_handleMeasureClick is running, firstClick section');\r\n        const count = this._latlngs.length;\r\n        const previousLatLng = this._latlngs[count - 2];\r\n        // console.log('previousLatLng:', previousLatLng);\r\n        const bounds = L.latLngBounds(previousLatLng, latlng);\r\n        const center = bounds.getCenter();\r\n        const pair = [previousLatLng, latlng];\r\n        // console.log('calc:', calc);\r\n        const calced = measure(pair);\r\n        this._addNewLengthNotation(center, calced).addTo(this._measureLengths);\r\n        // this._addNewLengthNotation(center, calced).addTo(this._measureLengths2);\r\n      }\r\n      if (this._measureBoundary) {\r\n        this._measureBoundary.bringToFront();\r\n      }\r\n      this._measureVertexes.bringToFront();\r\n    }\r\n    this._updateResults();\r\n    this._updateMeasureStartedWithPoints();\r\n  },\r\n\r\n  _addNewLengthNotation: function (latlng, calced) {\r\n    const answer = this._getShorterMeasurementDisplayStrings(calced);\r\n    const myIcon = L.divIcon({\r\n      className: 'my-div-icon',\r\n      html: answer.lengthDisplay\r\n    });\r\n    // you can set .my-div-icon styles in CSS\r\n    const marker = L.marker(latlng, {\r\n      icon: myIcon\r\n    });\r\n    this._lengths.push(answer.lengthDisplay);\r\n    this._lengthNotations.push(marker);\r\n    return marker;\r\n  },\r\n\r\n  // remove last length notation (when undo is clicked)\r\n  _removeLastLengthNotation: function () {\r\n    const i = this._lengthNotations.length;\r\n    // _lengthNotations is a simple array holding leaflet markers of leaflet divIcons\r\n    // it is used here to remove a marker from the feature group that is on the map\r\n    if (this._lengthNotations.length > 0) {\r\n      // _measureLengths is the leaflet feature group holding the leaflet markers of leaflet divIcons\r\n      this._lengthNotations[i - 1].removeFrom(this._measureLengths);\r\n    }\r\n    // remove the icon-marker from _lengthNotations, and the simple number from _lengths\r\n    this._lengthNotations = this._lengthNotations.slice(0, -1);\r\n    this._lengths = this._lengths.slice(0, -1);\r\n  },\r\n\r\n  // handle map mouse out during ongoing measure\r\n  // remove floating cursor vertex from map\r\n  _handleMapMouseOut: function () {\r\n    if (this._measureDrag) {\r\n      this._layer.removeLayer(this._measureDrag);\r\n      this._measureDrag = null;\r\n    }\r\n  },\r\n\r\n  // add various measure graphics to map - vertex, area, boundary\r\n  _addNewVertex: function (latlng) {\r\n    const marker = L.circleMarker(latlng, this._symbols.getSymbol('measureVertexActive'));\r\n    this._vertexCircleMarkers.push(marker);\r\n    marker.addTo(this._measureVertexes);\r\n  },\r\n\r\n  // remove last vertex (when undo is clicked)\r\n  _removeLastVertex: function () {\r\n    const i = this._vertexCircleMarkers.length;\r\n    if (this._vertexCircleMarkers.length > 0) {\r\n      this._vertexCircleMarkers[i - 1].removeFrom(this._measureVertexes);\r\n    }\r\n    this._vertexCircleMarkers = this._vertexCircleMarkers.slice(0, -1);\r\n  },\r\n\r\n  _addMeasureArea: function (latlngs) {\r\n    if (latlngs.length < 3) {\r\n      if (this._measureArea) {\r\n        this._layer.removeLayer(this._measureArea);\r\n        this._measureArea = null;\r\n      }\r\n      return;\r\n    }\r\n    if (!this._measureArea) {\r\n      this._measureArea = L.polygon(latlngs, this._symbols.getSymbol('measureArea')).addTo(\r\n        this._layer\r\n      );\r\n    } else {\r\n      this._measureArea.setLatLngs(latlngs);\r\n    }\r\n  },\r\n\r\n  _addMeasureBoundary: function (latlngs) {\r\n    if (latlngs.length < 2) {\r\n      if (this._measureBoundary) {\r\n        this._layer.removeLayer(this._measureBoundary);\r\n        this._measureBoundary = null;\r\n      }\r\n      return;\r\n    }\r\n    if (!this._measureBoundary) {\r\n      this._measureBoundary = L.polyline(latlngs, this._symbols.getSymbol('measureBoundary')).addTo(\r\n        this._layer\r\n      );\r\n    } else {\r\n      this._measureBoundary.setLatLngs(latlngs);\r\n    }\r\n  },\r\n});\r\n\r\nexport default MeasureControl;\r\n"],"names":["acres","factor","display","decimals","feet","kilometers","hectares","meters","miles","sqfeet","sqmeters","sqmiles","hide","el","setAttribute","show","removeAttribute","measure","latlngs","length","const","path","map","latlng","lat","lng","polyline","Polyline","polygon","Polygon","toGeoJSON","units","area","DEFAULT_OPTIONS","activeColor","completedColor","Symbology","options","this","_options","L","extend","getSymbol","name","measureDrag","clickable","radius","color","weight","opacity","fillColor","fillOpacity","className","measureArea","stroke","measureBoundary","fill","measureVertex","measureVertexActive","resultArea","resultLine","resultPoint","$","selector","document","querySelector","numberFormat","num","toLocaleString","templateSettings","imports","interpolate","controlTemplateCompiled","template","resultsTemplateCompiled","pointPopupTemplateCompiled","linePopupTemplateCompiled","areaPopupTemplateCompiled","L.Control","_className","position","primaryLengthUnit","primaryAreaUnit","captureZIndex","popupOptions","autoPanPadding","initialize","L.setOptions","_symbols","Object","assign","onAdd","_map","_latlngs","_lengths","_lengthNotations","_vertexCircleMarkers","_measureFeatures","_initLayout","on","_collapse","_layer","L.layerGroup","addTo","_container","onRemove","off","removeLayer","container","L.DomUtil","create","innerHTML","model","L.DomEvent","disableClickPropagation","disableScrollPropagation","$toggle","$interaction","$start","$cancel","$undo","$finish","$startPrompt","$measuringPrompt","$startHelp","$results","$measureTasks","_updateMeasureNotStarted","L.Browser","android","_expand","stop","touch","_startMeasure","_finishMeasure","_undoMeasure","_handleMeasureDoubleClick","dom.hide","dom.show","_locked","_updateMeasureStartedNoPoints","_updateMeasureStartedWithPoints","_measureLengths","L.featureGroup","_measureVertexes","_captureMarker","L.marker","getCenter","zIndexOffset","_setCaptureMarkerIcon","_handleMapMouseOut","_handleMeasureClick","_handleMeasureMove","_centerCaptureMarker","fire","slice","_removeLastLengthNotation","_removeLastVertex","_addMeasureArea","_addMeasureBoundary","_updateResults","isComplete","let","shouldDeleteLengths","_resultsModel","points","_clearMeasure","clearLayers","_measureDrag","_measureArea","_measureBoundary","setLatLng","setIcon","L.divIcon","iconSize","getSize","multiplyBy","_getMeasurementDisplayStrings","measurement","unitDefinitions","lengthDisplay","buildDisplay","secondaryLengthUnit","decPoint","thousandsSep","areaDisplay","secondaryAreaUnit","val","primaryUnit","secondaryUnit","formatMeasure","unit","formattedNumber","join","_getShorterMeasurementDisplayStrings","u","calced","pointCount","lengths","evt","L.circleMarker","bringToFront","measureFeature","push","removeFrom","i","count","previousLatLng","lastLatLng","center","L.latLngBounds","calced2","_addNewLengthNotation","j","resultFeature","popupContent","popupContainer","zoomLink","deleteLink","L.polyline","L.polygon","resultsModel","getBounds","fitBounds","padding","maxZoom","getLatLng","panTo","indexOf","bindPopup","openPopup","mouseEventToLatLng","originalEvent","lastClick","firstClick","vertexSymbol","equals","eachLayer","layer","setStyle","_path","_addNewVertex","answer","myIcon","html","marker","icon","setLatLngs"],"mappings":"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"}